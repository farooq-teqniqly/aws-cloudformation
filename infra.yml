AWSTemplateFormatVersion: "2010-09-09"

Description: CEN 6017 final project infrastructure CloudFormation template.

Parameters:
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC.
    Type: String
    AllowedPattern: '([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/([0-9]{1,2})'
    ConstraintDescription: The IP range must be in valid CIDR notation.

  SubnetPublicCIDR:
    Description: The IP range (CIDR notation) for the public subnet.
    Type: String
    AllowedPattern: '([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/([0-9]{1,2})'
    ConstraintDescription: The IP range must be in valid CIDR notation.

  SubnetPrivateCIDR:
    Description: The IP range (CIDR notation) for the private subnet.
    Type: String
    AllowedPattern: '([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/([0-9]{1,2})'
    ConstraintDescription: The IP range must be in valid CIDR notation.

  HttpAllowCIDR:
    Description: The IP range (CIDR notation) that can access the VPC using HTTP.
    Type: String
    AllowedPattern: '([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/([0-9]{1,2})'
    ConstraintDescription: The IP range must be in valid CIDR notation.
    MaxLength: 18
    MinLength: 9

  ElasticBeanstalkAppName:
    Description: The Elastic Beanstalk application name.
    Type: String

  S3BucketName:
    Description: The S3 bucket name.
    Type: String
  RepoName:
    Description: The CodeCommit repository name.
    Type: String

  QuoteServerVersion:
    Description: The Quote Server app version.
    Type: String
    AllowedPattern: '([0-9]{1,2})\.([0-9]{1,2})\.([0-9]{1,2})'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "vpc"]]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetPublicCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "public", "subnet"]]
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "public", "rt"]]
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "private", "subnet"]]
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "private", "rt"]]
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "igw"]]

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGatewayElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "ngw", "eip"]]

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIp.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "ngw"]]

  AllowHttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP access to VPC.
      GroupName: !Join ["-", [!Ref AWS::StackName, "vpc", "sg"]]
      SecurityGroupIngress:
        - CidrIp: !Ref HttpAllowCIDR
          Description: Allow HTTP access.
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: !Join ["", [!Ref NatGatewayElasticIp, "/32"]]
          Description: Allow HTTP access.
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "vpc", "sg"]]
      VpcId: !Ref VPC

  ElasticBeanstalkApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref ElasticBeanstalkAppName

  ElasticBeanstalkTestEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApp
      EnvironmentName: test
      SolutionStackName: 64bit Amazon Linux 2 v5.4.7 running Node.js 14
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "ebs", "env", "test"]]
      Tier:
        Name: WebServer
        Type: Standard
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t2.micro
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: aws-elasticbeanstalk-ec2-role
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: aws-elasticbeanstalk-service-role
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPC
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Ref PublicSubnet
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: port
          Value: 8080
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: NODE_ENV
          Value: Test
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: quote_server_version
          Value: !Ref QuoteServerVersion
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: SingleInstance

  ElasticBeanstalkProdEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApp
      EnvironmentName: prod
      SolutionStackName: 64bit Amazon Linux 2 v5.4.7 running Node.js 14
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "ebs", "env", "prod"]]
      Tier:
        Name: WebServer
        Type: Standard
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t2.micro
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: aws-elasticbeanstalk-ec2-role
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: aws-elasticbeanstalk-service-role
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPC
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Ref PublicSubnet
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: port
          Value: 8080
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: NODE_ENV
          Value: Production
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: quote_server_version
          Value: !Ref QuoteServerVersion
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: SingleInstance

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, "codebuild-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName:
            !Join ["-", [!Ref AWS::StackName, "codebuild-access-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:GitPull"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeVpcs"
                  - "ec2:CreateNetworkInterfacePermission"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - !Join
                    - ""
                    - - !GetAtt DevBuildsS3Bucket.Arn
                      - "/*"
                  - !Join
                    - ""
                    - - !GetAtt DevBuildsS3Bucket.Arn

  DevBuildsS3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ["-", [!Ref AWS::StackName, !Ref S3BucketName]]
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "s3b"]]

  UnitTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "build-test-${RepoName}-${AWS::StackName}"
      Artifacts:
        Type: S3
        Location: !Ref DevBuildsS3Bucket
        Name: !Sub "build-${RepoName}-${AWS::StackName}"
        Packaging: ZIP
      BadgeEnabled: true
      Description: Unit test project
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Location: !Sub https://git-codecommit.us-east-1.amazonaws.com/v1/repos/${RepoName}
        BuildSpec: buildspec.test.yml
        Type: CODECOMMIT
      TimeoutInMinutes: 10
      VpcConfig:
        VpcId: !Ref VPC
        Subnets: [!Ref PrivateSubnet]
        SecurityGroupIds: [!Ref AllowHttpSecurityGroup]
      Tags:
        - Key: "name"
          Value: !Join ["-", [!Ref AWS::StackName, "test-codebuid-project"]]

  SystemTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "build-system-test-${RepoName}-${AWS::StackName}"
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: true
      Description: System test project
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: TEST_URL
            Type: PLAINTEXT
            Value:
              !Join [
                "",
                [
                  "http://",
                  !GetAtt ElasticBeanstalkTestEnvironment.EndpointURL,
                ],
              ]
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Location: !Sub https://git-codecommit.us-east-1.amazonaws.com/v1/repos/${RepoName}
        BuildSpec: buildspec.int.yml
        Type: CODECOMMIT
      TimeoutInMinutes: 10
      VpcConfig:
        VpcId: !Ref VPC
        Subnets: [!Ref PrivateSubnet]
        SecurityGroupIds: [!Ref AllowHttpSecurityGroup]
      Tags:
        - Key: "name"
          Value:
            !Join ["-", [!Ref AWS::StackName, "system-test-codebuid-project"]]

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, "codepipeline-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName:
            !Join ["-", [!Ref AWS::StackName, "codepipeline-access-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action:
              - iam:PassRole
              Resource: "*"
              Effect: Allow
              Condition:
                StringEqualsIfExists:
                  iam:PassedToService:
                    - cloudformation.amazonaws.com
                    - elasticbeanstalk.amazonaws.com
                    - ec2.amazonaws.com
                    - ecs-tasks.amazonaws.com
            - Action:
                - codecommit:CancelUploadArchive
                - codecommit:GetBranch
                - codecommit:GetCommit
                - codecommit:GetRepository
                - codecommit:GetUploadArchiveStatus
                - codecommit:UploadArchive
              Resource: "*"
              Effect: Allow
            - Action:
                - codedeploy:CreateDeployment
                - codedeploy:GetApplication
                - codedeploy:GetApplicationRevision
                - codedeploy:GetDeployment
                - codedeploy:GetDeploymentConfig
                - codedeploy:RegisterApplicationRevision
              Resource: "*"
              Effect: Allow
            - Action:
                - codestar-connections:UseConnection
              Resource: "*"
              Effect: Allow
            - Action:
                - elasticbeanstalk:*
                - ec2:*
                - elasticloadbalancing:*
                - autoscaling:*
                - cloudwatch:*
                - s3:*
                - sns:*
                - cloudformation:*
                - rds:*
                - sqs:*
                - ecs:*
              Resource: "*"
              Effect: Allow
            - Action:
                - lambda:InvokeFunction
                - lambda:ListFunctions
              Resource: "*"
              Effect: Allow
            - Action:
                - opsworks:CreateDeployment
                - opsworks:DescribeApps
                - opsworks:DescribeCommands
                - opsworks:DescribeDeployments
                - opsworks:DescribeInstances
                - opsworks:DescribeStacks
                - opsworks:UpdateApp
                - opsworks:UpdateStack
              Resource: "*"
              Effect: Allow
            - Action:
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:DescribeStacks
                - cloudformation:UpdateStack
                - cloudformation:CreateChangeSet
                - cloudformation:DeleteChangeSet
                - cloudformation:DescribeChangeSet
                - cloudformation:ExecuteChangeSet
                - cloudformation:SetStackPolicy
                - cloudformation:ValidateTemplate
              Resource: "*"
              Effect: Allow
            - Action:
                - codebuild:BatchGetBuilds
                - codebuild:StartBuild
                - codebuild:BatchGetBuildBatches
                - codebuild:StartBuildBatch
              Resource: "*"
              Effect: Allow
            - Effect: Allow
              Action:
                - devicefarm:ListProjects
                - devicefarm:ListDevicePools
                - devicefarm:GetRun
                - devicefarm:GetUpload
                - devicefarm:CreateUpload
                - devicefarm:ScheduleRun
              Resource: "*"
            - Effect: Allow
              Action:
                - servicecatalog:ListProvisioningArtifacts
                - servicecatalog:CreateProvisioningArtifact
                - servicecatalog:DescribeProvisioningArtifact
                - servicecatalog:DeleteProvisioningArtifact
                - servicecatalog:UpdateProduct
              Resource: "*"
            - Effect: Allow
              Action:
                - cloudformation:ValidateTemplate
              Resource: "*"
            - Effect: Allow
              Action:
                - ecr:DescribeImages
              Resource: "*"
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:DescribeStateMachine
                - states:StartExecution
              Resource: "*"
            - Effect: Allow
              Action:
                - appconfig:StartDeployment
                - appconfig:StopDeployment
                - appconfig:GetDeployment
              Resource: "*"

  QuoteServerCiCd:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, "codepipeline", "quote-server"]]
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref DevBuildsS3Bucket
      Stages:
        -
          Name: GetYouSomeCode
          Actions:
            - OutputArtifacts:
                - Name: SourceOutput
              InputArtifacts: []
              Name: source
              Configuration:
                RepositoryName: !Ref RepoName
                BranchName: master
                PollForSourceChanges: 'false'
              RunOrder: 1
              ActionTypeId:
                Version: '1'
                Provider: CodeCommit
                Category: Source
                Owner: AWS

        -
          Name: RunUnitTests
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: unittests
              Configuration:
                BatchEnabled: 'false'
                CombineArtifacts: 'false'
                ProjectName: !Ref UnitTestCodeBuildProject
                PrimarySource: SourceOutput
              RunOrder: 1
              ActionTypeId:
                Version: '1'
                Provider: CodeBuild
                Category: Test
                Owner: AWS
        
        -
          Name: DeployToTest
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: deploytotest
              Configuration:
                ApplicationName: !Ref ElasticBeanstalkApp
                EnvironmentName: !Ref ElasticBeanstalkTestEnvironment 
              RunOrder: 1
              ActionTypeId:
                Version: '1'
                Provider: ElasticBeanstalk
                Category: Deploy
                Owner: AWS

        -
          Name: RunSystemTests
          Actions:
            - InputArtifacts:
              - Name: SourceOutput
              Name: systemtests
              Configuration:
                BatchEnabled: 'false'
                CombineArtifacts: 'false'
                ProjectName: !Ref SystemTestCodeBuildProject
                PrimarySource: SourceOutput
              RunOrder: 1
              ActionTypeId:
                Version: '1'
                Provider: CodeBuild
                Category: Test
                Owner: AWS

        -
          Name: DeployToProd
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: deploytoprod
              Configuration:
                ApplicationName: !Ref ElasticBeanstalkApp
                EnvironmentName: !Ref ElasticBeanstalkProdEnvironment 
              RunOrder: 1
              ActionTypeId:
                Version: '1'
                Provider: ElasticBeanstalk
                Category: Deploy
                Owner: AWS
  
Outputs:
  TestURL:
    Description: Test app URL.
    Value:
      !Join [
        "",
        ["http://", !GetAtt ElasticBeanstalkTestEnvironment.EndpointURL],
      ]
  ProdURL:
    Description: Production app URL.
    Value:
      !Join [
        "",
        ["http://", !GetAtt ElasticBeanstalkProdEnvironment.EndpointURL],
      ]
